---
title: Unrestricted Grammars
categories: Computation
icon: /img/icons/binary-tree.png
...

<section class="primary">

# Summary

An **unrestricted grammar** is a quadruple $G = (V, \Sigma, R, S)$, where

- $V$ is an alphabet;
- $\Sigma \subseteq V$ is the set of **terminal** symbols, and $V - \Sigma$ is the set of **nonterminal** symbols;
- $S \in V - \Sigma$ is the **start** symbol; and
- $R$, the set of **rules**, is a finite subset of $(V*(V-\Sigma)V*) \times V*$.

Notice that the definition of the rules denotes that the left-hand sides of rules need not consist of single nonterminals
as in the case of [context-free grammars](context_free_grammars). Instead, it can consist of any string of terminals
and nonterminals containing at least one nonterminal. In this way, the grammar is not necessarily context-free, though
it becomes obvious all context-free grammars also belong to the set of unrestricted grammars.

</section>

<section class="primary">

# Turing Machine Equivalence

It can be shown that a language is generated by a grammar if and only if it is recursively enumerable. That is, given any
unrestricted grammar, we can create a Turing machine $M$ that semidecides the language generated by $G$. Similarly, given
some Turing machine $M$, we can construct a grammar $G$ that generates the language semidecided by $M$.

</section>

<section class="primary">

# Notes

- Papadimitriou & Lewis (1998). Elements of the Theory of Computation (2nd ed.). Prentice-Hall. ISBN 0-13-262478-8

</section>